/* Generated by the Nim Compiler v1.5.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33554461 = {size: 0,kind: 41,base: null,node: null,finalizer: null};
var NTI385876006 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI385876007 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI33555103 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555110 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555119 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555109 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555111 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555072 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555154 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI33554439 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555153 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI33555101 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555102 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555117 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI33555117 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555117.node = NNI33555117;
var NNI33555102 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555102.node = NNI33555102;
NTI33555153.base = NTI33555101;
NTI33555154.base = NTI33555101;
var NNI33555101 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555153, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554439, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554438, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554438, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555154, name: "up", sons: null}]};
NTI33555101.node = NNI33555101;
var NNI33555072 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555072.node = NNI33555072;
NTI33555101.base = NTI33555072;
NTI33555102.base = NTI33555101;
NTI33555117.base = NTI33555102;
var NNI33555111 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555111.node = NNI33555111;
var NNI33555109 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555109.node = NNI33555109;
NTI33555109.base = NTI33555102;
NTI33555111.base = NTI33555109;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555113.base = NTI33555102;
var NNI33555119 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555119.node = NNI33555119;
NTI33555119.base = NTI33555102;
var NNI33555110 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555110.node = NNI33555110;
NTI33555110.base = NTI33555109;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
var NNI33555103 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555103.node = NNI33555103;
NTI33555103.base = NTI33555101;
NTI33555114.base = NTI33555103;
NTI385876006.base = NTI33554461;
NTI385876007.base = NTI385876006;
function makeNimstrLit(c_33556788) {
      var result = [];
  for (var i = 0; i < c_33556788.length; ++i) {
    result[i] = c_33556788.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_33556791) {
      var ln = c_33556791.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556791.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556791.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_33557130, src_33557131, ti_33557132) {
  var result_33557141 = null;

    switch (ti_33557132.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557121(ti_33557132))) {
      result_33557141 = src_33557131;
      }
      else {
        result_33557141 = [src_33557131[0], src_33557131[1]];
      }
      
      break;
    case 19:
            if (dest_33557130 === null || dest_33557130 === undefined) {
        dest_33557130 = {};
      }
      else {
        for (var key in dest_33557130) { delete dest_33557130[key]; }
      }
      for (var key in src_33557131) { dest_33557130[key] = src_33557131[key]; }
      result_33557141 = dest_33557130;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557132.base == null))) {
      result_33557141 = nimCopy(dest_33557130, src_33557131, ti_33557132.base);
      }
      else {
      if ((ti_33557132.kind == 17)) {
      result_33557141 = (dest_33557130 === null || dest_33557130 === undefined) ? {m_type: ti_33557132} : dest_33557130;
      }
      else {
        result_33557141 = (dest_33557130 === null || dest_33557130 === undefined) ? {} : dest_33557130;
      }
      }
      nimCopyAux(result_33557141, src_33557131, ti_33557132.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557131 === null) {
        result_33557141 = null;
      }
      else {
        if (dest_33557130 === null || dest_33557130 === undefined) {
          dest_33557130 = new Array(src_33557131.length);
        }
        else {
          dest_33557130.length = src_33557131.length;
        }
        result_33557141 = dest_33557130;
        for (var i = 0; i < src_33557131.length; ++i) {
          result_33557141[i] = nimCopy(result_33557141[i], src_33557131[i], ti_33557132.base);
        }
      }
    
      break;
    case 28:
            if (src_33557131 !== null) {
        result_33557141 = src_33557131.slice(0);
      }
    
      break;
    default: 
      result_33557141 = src_33557131;
      break;
    }

  return result_33557141;

}
function toJSStr(s_33556794) {
                    var Tmp5;
            var Tmp7;

  var result_33556795 = null;

    var res_33556829 = newSeq_33556812((s_33556794).length);
    var i_33556830 = 0;
    var j_33556831 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_33556830 < (s_33556794).length)) break L2;
          var c_33556832 = s_33556794[i_33556830];
          if ((c_33556832 < 128)) {
          res_33556829[j_33556831] = String.fromCharCode(c_33556832);
          i_33556830 += 1;
          }
          else {
            var helper_33556844 = newSeq_33556812(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_33556845 = c_33556832.toString(16);
                  if ((((code_33556845) == null ? 0 : (code_33556845).length) == 1)) {
                  helper_33556844.push("%0");;
                  }
                  else {
                  helper_33556844.push("%");;
                  }
                  
                  helper_33556844.push(code_33556845);;
                  i_33556830 += 1;
                    if (((s_33556794).length <= i_33556830)) Tmp5 = true; else {                      Tmp5 = (s_33556794[i_33556830] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_33556832 = s_33556794[i_33556830];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_33556829[j_33556831] = decodeURIComponent(helper_33556844.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_33556829[j_33556831] = helper_33556844.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_33556831 += 1;
        }
    } while(false);
    if (res_33556829.length < j_33556831) { for (var i=res_33556829.length;i<j_33556831;++i) res_33556829.push(null); }
               else { res_33556829.length = j_33556831; };
    result_33556795 = res_33556829.join("");

  return result_33556795;

}
function raiseException(e_33556655, ename_33556656) {
    e_33556655.name = ename_33556656;
    if ((excHandler == 0)) {
    unhandledException(e_33556655);
    }
    
    throw e_33556655;

  
}
function chckIndx(i_33557174, a_33557175, b_33557176) {
      var Tmp1;

  var result_33557177 = 0;

  BeforeRet: do {
      if (!(a_33557175 <= i_33557174)) Tmp1 = false; else {        Tmp1 = (i_33557174 <= b_33557176);      }    if (Tmp1) {
    result_33557177 = i_33557174;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557174, a_33557175, b_33557176);
    }
    
  } while (false);

  return result_33557177;

}
function addInt(a_33556927, b_33556928) {
        var result = a_33556927 + b_33556928;
    checkOverflowInt(result);
    return result;
  

  
}
function chckRange(i_33557179, a_33557180, b_33557181) {
      var Tmp1;

  var result_33557182 = 0;

  BeforeRet: do {
      if (!(a_33557180 <= i_33557179)) Tmp1 = false; else {        Tmp1 = (i_33557179 <= b_33557181);      }    if (Tmp1) {
    result_33557182 = i_33557179;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557182;

}
function subInt(a_33556931, b_33556932) {
        var result = a_33556931 - b_33556932;
    checkOverflowInt(result);
    return result;
  

  
}
            var DigitSpriteData_520093705 = new Int32Array([240, 144, 144, 144, 240, 32, 96, 32, 32, 112, 240, 16, 240, 128, 240, 240, 16, 240, 16, 240, 144, 144, 240, 16, 16, 240, 128, 240, 16, 240, 240, 128, 240, 144, 240, 240, 16, 32, 64, 64, 240, 144, 240, 144, 240, 240, 144, 240, 16, 240, 240, 144, 240, 144, 144, 224, 144, 224, 144, 224, 240, 128, 128, 128, 240, 224, 144, 144, 144, 224, 240, 128, 240, 128, 240, 240, 128, 240, 128, 128]);
function mnewString(len_33556880) {
        return new Array(len_33556880);
  

  
}
function divInt(a_33556939, b_33556940) {
        if (b_33556940 == 0) raiseDivByZero();
    if (b_33556940 == -1 && a_33556939 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556939 / b_33556940);
  

  
}
function mulInt(a_33556935, b_33556936) {
        var result = a_33556935 * b_33556936;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet2 = setConstr(10, 13, 32, 61);
var ConstSet3 = setConstr(10, 13, 32);
          var decodeTable_503316863 = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 62, 255, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 63, 255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255];
function absInt(a_33556978) {
    var Tmp1;

  var result_33556979 = 0;

    if ((a_33556978 < 0)) {
    Tmp1 = (a_33556978 * -1);
    }
    else {
    Tmp1 = a_33556978;
    }
    
    result_33556979 = Tmp1;

  return result_33556979;

}
function modInt(a_33556943, b_33556944) {
        if (b_33556944 == 0) raiseDivByZero();
    if (b_33556944 == -1 && a_33556943 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556943 % b_33556944);
  

  
}
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
    var KeyboardCodes_385875972 = new Int32Array([49, 50, 51, 52, 81, 87, 69, 82, 65, 83, 68, 70, 90, 88, 67, 86]);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var cb64_503316484 = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47];
var cb64safe_503316485 = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95];
var state_570425354 = [{a0: 1773455756, a1: 4275166512}];
if (globalThis.utcInstance_788530572 === undefined) {
  utcInstance_788530572 = [null];
}
if (globalThis.localInstance_788530573 === undefined) {
  localInstance_788530573 = [null];
}
var Chip8InstructionPointers_520093793 = [[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]];
function isFatPointer_33557121(ti_33557122) {
  var result_33557123 = false;

  BeforeRet: do {
    result_33557123 = !((ConstSet1[ti_33557122.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557123;

}
function nimCopyAux(dest_33557134, src_33557135, n_33557136) {
    switch (n_33557136.kind) {
    case 0:
      break;
    case 1:
            dest_33557134[n_33557136.offset] = nimCopy(dest_33557134[n_33557136.offset], src_33557135[n_33557136.offset], n_33557136.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557136.sons.length; i++) {
      nimCopyAux(dest_33557134, src_33557135, n_33557136.sons[i]);
    }
    
      break;
    case 3:
            dest_33557134[n_33557136.offset] = nimCopy(dest_33557134[n_33557136.offset], src_33557135[n_33557136.offset], n_33557136.typ);
      for (var i = 0; i < n_33557136.sons.length; ++i) {
        nimCopyAux(dest_33557134, src_33557135, n_33557136.sons[i][1]);
      }
    
      break;
    }

  
}
function add_33556416(x_33556417, x_33556417_Idx, y_33556418) {
          if (x_33556417[x_33556417_Idx] === null) { x_33556417[x_33556417_Idx] = []; }
      var off = x_33556417[x_33556417_Idx].length;
      x_33556417[x_33556417_Idx].length += y_33556418.length;
      for (var i = 0; i < y_33556418.length; ++i) {
        x_33556417[x_33556417_Idx][off+i] = y_33556418.charCodeAt(i);
      }
    

  
}
function newSeq_33556812(len_33556814) {
  var result_33556815 = [];

    result_33556815 = new Array(len_33556814); for (var i=0;i<len_33556814;++i) {result_33556815[i]=null;}
  return result_33556815;

}
function unhandledException(e_33556651) {
    var buf_33556652 = [[]];
    if (!(((e_33556651.message).length == 0))) {
    buf_33556652[0].push.apply(buf_33556652[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556652[0].push.apply(buf_33556652[0], e_33556651.message);;
    }
    else {
    buf_33556652[0].push.apply(buf_33556652[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556652[0].push.apply(buf_33556652[0], makeNimstrLit(" ["));;
    add_33556416(buf_33556652, 0, e_33556651.name);
    buf_33556652[0].push.apply(buf_33556652[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556653 = toJSStr(buf_33556652[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556653);
  }
  else {
    throw cbuf_33556653;
  }
  

  
}
function raiseIndexError(i_33556742, a_33556743, b_33556744) {
    var Tmp1;

    if ((b_33556744 < a_33556743)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_33556742)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_33556743)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_33556744)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI33554438), parent: null, m_type: NTI33555117, name: null, trace: [], up: null}, "IndexDefect");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555111, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_33556925) {
        if (a_33556925 > 2147483647 || a_33556925 < -2147483648) raiseOverflow();
  

  
}
function fill_520093837(a_520093839, value_520093840) {
    var xHEX60gensym1_520093846 = 0;
    L1: do {
        L2: while (true) {
        if (!(xHEX60gensym1_520093846 <= (a_520093839).length - 1)) break L2;
          a_520093839[chckIndx(xHEX60gensym1_520093846, 0, (a_520093839).length-1)] = value_520093840;
          xHEX60gensym1_520093846 = addInt(xHEX60gensym1_520093846, 1);
        }
    } while(false);

  
}
function sysFatal_218103843(message_218103846) {
    raiseException({message: nimCopy(null, message_218103846, NTI33554438), m_type: NTI33555113, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_218103841(msg_218103842) {
    sysFatal_218103843(msg_218103842);

  
}
function failedAssertImpl_218103865(msg_218103866) {
    raiseAssert_218103841(msg_218103866);

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555119, name: null, trace: [], up: null}, "RangeDefect");

  
}
function rotl_570425369(x_570425370, k_570425371) {
  var result_570425372 = 0;

    result_570425372 = ((x_570425370 << k_570425371) | ((x_570425370 >>> 0) >>> ((64 - k_570425371) >>> 0)));

  return result_570425372;

}
function next_570425381(r_570425382) {
  var result_570425383 = 0;

    var s0_570425384 = r_570425382.a0;
    var s1_570425385 = r_570425382.a1;
    result_570425383 = ((s0_570425384 + s1_570425385) >>> 0);
    s1_570425385 = (s1_570425385 ^ s0_570425384);
    r_570425382.a0 = ((rotl_570425369(s0_570425384, 55) ^ s1_570425385) ^ (s1_570425385 << 14));
    r_570425382.a1 = rotl_570425369(s1_570425385, 36);

  return result_570425383;

}
function rand_570425431(r_570425432, max_570425433) {
  var result_570425434 = 0;

  BeforeRet: do {
    if ((max_570425433 == 0)) {
    break BeforeRet;
    }
    
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          var x_570425435 = next_570425381(r_570425432);
          if ((x_570425435 <= ((4294967295 - (4294967295 % (max_570425433 >>> 0))) >>> 0))) {
          result_570425434 = chckRange((x_570425435 % ((max_570425433 + 1) )), -2147483648, 2147483647);
          break BeforeRet;
          }
          
        }
    } while(false);
  } while (false);

  return result_570425434;

}
function rand_570425436(max_570425437) {
  var result_570425438 = 0;

    result_570425438 = rand_570425431(state_570425354[0], chckRange(max_570425437, 0, 2147483647));

  return result_570425438;

}
function HEX3Aanonymous_520093820(prg_520093821, ins_520093822, ins_520093822_Idx) {
  BeforeRet: do {
    switch (((ins_520093822[ins_520093822_Idx] & 255) & 0xff)) {
    case 224:
      L1: do {
        var i_520093836 = 0;
        var res_520094145 = 0;
        L2: do {
            L3: while (true) {
            if (!(res_520094145 <= 31)) break L3;
              i_520093836 = res_520094145;
              fill_520093837(prg_520093821.vram[chckIndx(i_520093836, 0, (prg_520093821.vram).length-1)], 0);
              res_520094145 = addInt(res_520094145, 1);
            }
        } while(false);
      } while(false);
      break;
    case 238:
      prg_520093821.stackPosition = ((prg_520093821.stackPosition - 1) & 0xff);
      if (!((0 <= prg_520093821.stackPosition))) {
      failedAssertImpl_218103865(makeNimstrLit("interpreter.nim(83, 14) `prg.stackPosition >= 0` The stack position has been decreased too many times!"));
      }
      
      break;
    default: 
      break BeforeRet;
      break;
    }
  } while (false);

  
}
function HEX3Aanonymous_520093870(prg_520093871, ins_520093872, ins_520093872_Idx) {
    prg_520093871.stack[chckIndx(prg_520093871.stackPosition, 0, (prg_520093871.stack).length-1)] = ((((ins_520093872[ins_520093872_Idx] & 4095) - 2) & 0xffff) >>> 0);

  
}
function HEX3Aanonymous_520093883(prg_520093884, ins_520093885, ins_520093885_Idx) {
    prg_520093884.stackPosition = ((prg_520093884.stackPosition + 1) & 0xff);
    if (!((prg_520093884.stackPosition <= 22))) {
    failedAssertImpl_218103865(makeNimstrLit("interpreter.nim(102, 10) `prg.stackPosition <= StackSize` The stack pointer has been increased too many times!"));
    }
    
    prg_520093884.stack[chckIndx(prg_520093884.stackPosition, 0, (prg_520093884.stack).length-1)] = ((((ins_520093885[ins_520093885_Idx] & 4095) - 2) & 0xffff) >>> 0);

  
}
function HEX3Aanonymous_520093896(prg_520093897, ins_520093898, ins_520093898_Idx) {
    var variable_520093903 = (((ins_520093898[ins_520093898_Idx] & 0xffff) >>> 8) & 15);
    var value_520093904 = (ins_520093898[ins_520093898_Idx] & 255);
    if (((prg_520093897.vars[chckIndx(variable_520093903, 0, (prg_520093897.vars).length-1)] & 0xffff) == value_520093904)) {
    prg_520093897.stack[chckIndx(prg_520093897.stackPosition, 0, (prg_520093897.stack).length-1)] = ((prg_520093897.stack[chckIndx(prg_520093897.stackPosition, 0, (prg_520093897.stack).length-1)] + 2) >>> 0);
    }
    

  
}
function HEX3Aanonymous_520093910(prg_520093911, ins_520093912, ins_520093912_Idx) {
    var variable_520093917 = prg_520093911.vars[chckIndx((((ins_520093912[ins_520093912_Idx] & 0xffff) >>> 8) & 15), 0, (prg_520093911.vars).length-1)];
    var value_520093918 = (ins_520093912[ins_520093912_Idx] & 255);
    if (!(((variable_520093917 & 0xffff) == value_520093918))) {
    prg_520093911.stack[chckIndx(prg_520093911.stackPosition, 0, (prg_520093911.stack).length-1)] = ((prg_520093911.stack[chckIndx(prg_520093911.stackPosition, 0, (prg_520093911.stack).length-1)] + 2) >>> 0);
    }
    

  
}
function HEX3Aanonymous_520093924(prg_520093925, ins_520093926, ins_520093926_Idx) {
    var variableX_520093931 = prg_520093925.vars[chckIndx((((ins_520093926[ins_520093926_Idx] & 0xffff) >>> 8) & 15), 0, (prg_520093925.vars).length-1)];
    var variableY_520093936 = prg_520093925.vars[chckIndx((((ins_520093926[ins_520093926_Idx] & 0xffff) >>> 4) & 15), 0, (prg_520093925.vars).length-1)];
    if ((variableX_520093931 == variableY_520093936)) {
    prg_520093925.stack[chckIndx(prg_520093925.stackPosition, 0, (prg_520093925.stack).length-1)] = ((prg_520093925.stack[chckIndx(prg_520093925.stackPosition, 0, (prg_520093925.stack).length-1)] + 2) >>> 0);
    }
    

  
}
function HEX3Aanonymous_520093942(prg_520093943, ins_520093944, ins_520093944_Idx) {
    var variable_520093949 = (((ins_520093944[ins_520093944_Idx] & 0xffff) >>> 8) & 15);
    var value_520093950 = ((ins_520093944[ins_520093944_Idx] & 255) & 0xff);
    prg_520093943.vars[chckIndx(variable_520093949, 0, (prg_520093943.vars).length-1)] = value_520093950;

  
}
function HEX3Aanonymous_520093952(prg_520093953, ins_520093954, ins_520093954_Idx) {
    var variable_520093959 = (((ins_520093954[ins_520093954_Idx] & 0xffff) >>> 8) & 15);
    var value_520093960 = ((ins_520093954[ins_520093954_Idx] & 255) & 0xff);
    prg_520093953.vars[chckIndx(variable_520093959, 0, (prg_520093953.vars).length-1)] = ((prg_520093953.vars[chckIndx(variable_520093959, 0, (prg_520093953.vars).length-1)] + value_520093960) & 0xff);

  
}
function HEX3Aanonymous_520093966(prg_520093967, ins_520093968, ins_520093968_Idx) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

    var variableX_520093986 = (((ins_520093968[ins_520093968_Idx] & 0xffff) >>> 8) & 15);
    var variableY_520093991 = (((ins_520093968[ins_520093968_Idx] & 0xffff) >>> 4) & 15);
    var instruction_520093992 = (ins_520093968[ins_520093968_Idx] & 15);
    switch (chckRange(instruction_520093992, 0, 14)) {
    case 0:
      prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] = prg_520093967.vars[chckIndx(variableY_520093991, 0, (prg_520093967.vars).length-1)];
      break;
    case 1:
      prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] = (prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] | prg_520093967.vars[chckIndx(variableY_520093991, 0, (prg_520093967.vars).length-1)]);
      break;
    case 2:
      prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] = (prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] & prg_520093967.vars[chckIndx(variableY_520093991, 0, (prg_520093967.vars).length-1)]);
      break;
    case 3:
      prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] = (prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] ^ prg_520093967.vars[chckIndx(variableY_520093991, 0, (prg_520093967.vars).length-1)]);
      break;
    case 4:
      var res_520093993 = (0xfffe - (((prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] + prg_520093967.vars[chckIndx(variableY_520093991, 0, (prg_520093967.vars).length-1)]) & 0xff) & 0xffff));
      if ((255 < res_520093993)) {
      Tmp1 = 1;
      }
      else {
      Tmp1 = 0;
      }
      
      prg_520093967.vars[chckIndx(15, 0, (prg_520093967.vars).length-1)] = Tmp1;
      prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] = ((res_520093993 & 255) & 0xff);
      break;
    case 5:
      if ((prg_520093967.vars[chckIndx(variableY_520093991, 0, (prg_520093967.vars).length-1)] < prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)])) {
      Tmp2 = 1;
      }
      else {
      Tmp2 = 0;
      }
      
      prg_520093967.vars[chckIndx(15, 0, (prg_520093967.vars).length-1)] = Tmp2;
      prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] = ((prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] - prg_520093967.vars[chckIndx(variableY_520093991, 0, (prg_520093967.vars).length-1)]) & 0xff);
      break;
    case 6:
      prg_520093967.vars[chckIndx(15, 0, (prg_520093967.vars).length-1)] = (prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] & 1);
      prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] = ((prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] / 2) & 0xff);
      break;
    case 7:
      if ((prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] < prg_520093967.vars[chckIndx(variableY_520093991, 0, (prg_520093967.vars).length-1)])) {
      Tmp3 = 1;
      }
      else {
      Tmp3 = 0;
      }
      
      prg_520093967.vars[chckIndx(15, 0, (prg_520093967.vars).length-1)] = Tmp3;
      prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] = ((prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] - prg_520093967.vars[chckIndx(variableY_520093991, 0, (prg_520093967.vars).length-1)]) & 0xff);
      break;
    case 14:
      prg_520093967.vars[chckIndx(15, 0, (prg_520093967.vars).length-1)] = (((prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] & 0xff) >>> 7) & 1);
      prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] = ((prg_520093967.vars[chckIndx(variableX_520093986, 0, (prg_520093967.vars).length-1)] * 2) & 0xff);
      break;
    }

  
}
function HEX3Aanonymous_520094008(prg_520094009, ins_520094010, ins_520094010_Idx) {
    var variableX_520094015 = (((ins_520094010[ins_520094010_Idx] & 0xffff) >>> 8) & 15);
    var variableY_520094020 = (((ins_520094010[ins_520094010_Idx] & 0xffff) >>> 4) & 15);
    if (!((prg_520094009.vars[chckIndx(variableX_520094015, 0, (prg_520094009.vars).length-1)] == prg_520094009.vars[chckIndx(variableY_520094020, 0, (prg_520094009.vars).length-1)]))) {
    prg_520094009.stack[chckIndx(prg_520094009.stackPosition, 0, (prg_520094009.stack).length-1)] = ((prg_520094009.stack[chckIndx(prg_520094009.stackPosition, 0, (prg_520094009.stack).length-1)] + 2) >>> 0);
    }
    

  
}
function HEX3Aanonymous_520094026(prg_520094027, ins_520094028, ins_520094028_Idx) {
    prg_520094027.i = (ins_520094028[ins_520094028_Idx] & 4095);

  
}
function HEX3Aanonymous_520094030(prg_520094031, ins_520094032, ins_520094032_Idx) {
    prg_520094031.stack[chckIndx(prg_520094031.stackPosition, 0, (prg_520094031.stack).length-1)] = ((((((prg_520094031.vars[chckIndx(0, 0, (prg_520094031.vars).length-1)] & 0xffff) + (ins_520094032[ins_520094032_Idx] & 4095)) & 0xffff) - 2) & 0xffff) >>> 0);

  
}
function HEX3Aanonymous_520094034(prg_520094035, ins_520094036, ins_520094036_Idx) {
    var variable_520094041 = (((ins_520094036[ins_520094036_Idx] & 3840) & 0xffff) >>> 8);
    var value_520094042 = ((ins_520094036[ins_520094036_Idx] & 255) & 0xff);
    var randomNumber_520094043 = (rand_570425436(256) & 0xff);
    prg_520094035.vars[chckIndx(variable_520094041, 0, (prg_520094035.vars).length-1)] = (value_520094042 & randomNumber_520094043);

  
}
function HEX3Aanonymous_520094045(prg_520094046, ins_520094047, ins_520094047_Idx) {
    var x_520094052 = prg_520094046.vars[chckIndx((((ins_520094047[ins_520094047_Idx] & 0xffff) >>> 8) & 15), 0, (prg_520094046.vars).length-1)];
    var y_520094057 = prg_520094046.vars[chckIndx((((ins_520094047[ins_520094047_Idx] & 0xffff) >>> 4) & 15), 0, (prg_520094046.vars).length-1)];
    var n_520094058 = (ins_520094047[ins_520094047_Idx] & 15);
    prg_520094046.vars[chckIndx(15, 0, (prg_520094046.vars).length-1)] = 0;
    L1: do {
      var i_520094059 = 0;
      var colontmp__520094154 = 0;
      var colontmp__520094155 = 0;
      colontmp__520094154 = 0;
      colontmp__520094155 = n_520094058;
      var res_520094157 = colontmp__520094154;
      L2: do {
          L3: while (true) {
          if (!(res_520094157 < colontmp__520094155)) break L3;
            i_520094059 = res_520094157;
            var vramPositionY_520094060 = (((y_520094057 + i_520094059) ) % 32);
            L4: do {
              var j_520094066 = 0;
              var res_520094152 = 7;
              L5: do {
                  L6: while (true) {
                  if (!(0 <= res_520094152)) break L6;
                    j_520094066 = res_520094152;
                    var bit_520094071 = (((prg_520094046.ram[chckIndx(((prg_520094046.i + i_520094059) ), 0, (prg_520094046.ram).length-1)] & 0xff) >>> j_520094066) & 1);
                    var vramPositionX_520094072 = (((((56 - x_520094052) & 0xff) + (j_520094066 & 0xff)) & 0xff) % 64);
                    var collision_520094073 = ((prg_520094046.vram[chckIndx(vramPositionY_520094060, 0, (prg_520094046.vram).length-1)][chckIndx(vramPositionX_520094072, 0, (prg_520094046.vram[chckIndx(vramPositionY_520094060, 0, (prg_520094046.vram).length-1)]).length-1)] & 1) & bit_520094071);
                    prg_520094046.vars[chckIndx(15, 0, (prg_520094046.vars).length-1)] = (prg_520094046.vars[chckIndx(15, 0, (prg_520094046.vars).length-1)] | collision_520094073);
                    prg_520094046.vram[chckIndx(vramPositionY_520094060, 0, (prg_520094046.vram).length-1)][chckIndx(vramPositionX_520094072, 0, (prg_520094046.vram[chckIndx(vramPositionY_520094060, 0, (prg_520094046.vram).length-1)]).length-1)] = (prg_520094046.vram[chckIndx(vramPositionY_520094060, 0, (prg_520094046.vram).length-1)][chckIndx(vramPositionX_520094072, 0, (prg_520094046.vram[chckIndx(vramPositionY_520094060, 0, (prg_520094046.vram).length-1)]).length-1)] ^ bit_520094071);
                    res_520094152 = subInt(res_520094152, 1);
                  }
              } while(false);
            } while(false);
            res_520094157 = ((res_520094157 + 1) );
          }
      } while(false);
    } while(false);

  
}
function HEX3Aanonymous_520094075(prg_520094076, ins_520094077, ins_520094077_Idx) {
    var variable_520094088 = (((ins_520094077[ins_520094077_Idx] & 0xffff) >>> 8) & 15);
    var instruction_520094089 = (ins_520094077[ins_520094077_Idx] & 255);
    switch (chckRange(instruction_520094089, 158, 161)) {
    case 158:
      if (prg_520094076.keyboard[chckIndx(prg_520094076.vars[chckIndx(variable_520094088, 0, (prg_520094076.vars).length-1)], 0, (prg_520094076.keyboard).length-1)]) {
      prg_520094076.stack[chckIndx(prg_520094076.stackPosition, 0, (prg_520094076.stack).length-1)] = ((prg_520094076.stack[chckIndx(prg_520094076.stackPosition, 0, (prg_520094076.stack).length-1)] + 2) >>> 0);
      }
      
      break;
    case 161:
      if (!(prg_520094076.keyboard[chckIndx(prg_520094076.vars[chckIndx(variable_520094088, 0, (prg_520094076.vars).length-1)], 0, (prg_520094076.keyboard).length-1)])) {
      prg_520094076.stack[chckIndx(prg_520094076.stackPosition, 0, (prg_520094076.stack).length-1)] = ((prg_520094076.stack[chckIndx(prg_520094076.stackPosition, 0, (prg_520094076.stack).length-1)] + 2) >>> 0);
      }
      
      break;
    }

  
}
function HEX3Aanonymous_520094108(prg_520094109, ins_520094110, ins_520094110_Idx) {
  BeforeRet: do {
    var variable_520094115 = (((ins_520094110[ins_520094110_Idx] & 0xffff) >>> 8) & 15);
    var instruction_520094116 = (ins_520094110[ins_520094110_Idx] & 255);
    switch (instruction_520094116) {
    case 7:
      prg_520094109.vars[chckIndx(variable_520094115, 0, (prg_520094109.vars).length-1)] = prg_520094109.dt;
      break;
    case 10:
      prg_520094109.vars[chckIndx(variable_520094115, 0, (prg_520094109.vars).length-1)] = 0;
      break;
    case 21:
      prg_520094109.dt = prg_520094109.vars[chckIndx(variable_520094115, 0, (prg_520094109.vars).length-1)];
      break;
    case 24:
      prg_520094109.st = prg_520094109.vars[chckIndx(variable_520094115, 0, (prg_520094109.vars).length-1)];
      break;
    case 30:
      prg_520094109.i = ((prg_520094109.i + (prg_520094109.vars[chckIndx(variable_520094115, 0, (prg_520094109.vars).length-1)] & 0xffff)) & 0xffff);
      break;
    case 41:
      prg_520094109.i = (((prg_520094109.vars[chckIndx(variable_520094115, 0, (prg_520094109.vars).length-1)] * 5) & 0xff) & 0xffff);
      break;
    case 51:
      prg_520094109.ram[chckIndx(prg_520094109.i, 0, (prg_520094109.ram).length-1)] = (((prg_520094109.vars[chckIndx(variable_520094115, 0, (prg_520094109.vars).length-1)] / 100) & 0xff) % 10);
      prg_520094109.ram[chckIndx(((prg_520094109.i + 1) & 0xffff), 0, (prg_520094109.ram).length-1)] = (((prg_520094109.vars[chckIndx(variable_520094115, 0, (prg_520094109.vars).length-1)] / 10) & 0xff) % 10);
      prg_520094109.ram[chckIndx(((prg_520094109.i + 2) & 0xffff), 0, (prg_520094109.ram).length-1)] = (prg_520094109.vars[chckIndx(variable_520094115, 0, (prg_520094109.vars).length-1)] % 10);
      break;
    case 85:
      L1: do {
        var i_520094121 = 0;
        var colontmp__520094160 = 0;
        var colontmp__520094161 = 0;
        colontmp__520094160 = 0;
        colontmp__520094161 = variable_520094115;
        var res_520094163 = colontmp__520094160;
        L2: do {
            L3: while (true) {
            if (!(res_520094163 <= colontmp__520094161)) break L3;
              i_520094121 = res_520094163;
              prg_520094109.ram[chckIndx(((prg_520094109.i + i_520094121) ), 0, (prg_520094109.ram).length-1)] = prg_520094109.vars[chckIndx(i_520094121, 0, (prg_520094109.vars).length-1)];
              res_520094163 = ((res_520094163 + 1) );
            }
        } while(false);
      } while(false);
      break;
    case 101:
      L4: do {
        var i_520094122 = 0;
        var colontmp__520094166 = 0;
        var colontmp__520094167 = 0;
        colontmp__520094166 = 0;
        colontmp__520094167 = variable_520094115;
        var res_520094168 = colontmp__520094166;
        L5: do {
            L6: while (true) {
            if (!(res_520094168 <= colontmp__520094167)) break L6;
              i_520094122 = res_520094168;
              prg_520094109.vars[chckIndx(i_520094122, 0, (prg_520094109.vars).length-1)] = prg_520094109.ram[chckIndx(((prg_520094109.i + i_520094122) ), 0, (prg_520094109.ram).length-1)];
              res_520094168 = ((res_520094168 + 1) );
            }
        } while(false);
      } while(false);
      break;
    default: 
      break BeforeRet;
      break;
    }
    break BeforeRet;
  } while (false);

  
}
Chip8InstructionPointers_520093793[0][chckIndx(0, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520093820;
Chip8InstructionPointers_520093793[0][chckIndx(1, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520093870;
Chip8InstructionPointers_520093793[0][chckIndx(2, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520093883;
Chip8InstructionPointers_520093793[0][chckIndx(3, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520093896;
Chip8InstructionPointers_520093793[0][chckIndx(4, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520093910;
Chip8InstructionPointers_520093793[0][chckIndx(5, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520093924;
Chip8InstructionPointers_520093793[0][chckIndx(6, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520093942;
Chip8InstructionPointers_520093793[0][chckIndx(7, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520093952;
Chip8InstructionPointers_520093793[0][chckIndx(8, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520093966;
Chip8InstructionPointers_520093793[0][chckIndx(9, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520094008;
Chip8InstructionPointers_520093793[0][chckIndx(10, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520094026;
Chip8InstructionPointers_520093793[0][chckIndx(11, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520094030;
Chip8InstructionPointers_520093793[0][chckIndx(12, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520094034;
Chip8InstructionPointers_520093793[0][chckIndx(13, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520094045;
Chip8InstructionPointers_520093793[0][chckIndx(14, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520094075;
Chip8InstructionPointers_520093793[0][chckIndx(15, 0, (Chip8InstructionPointers_520093793[0]).length-1)] = HEX3Aanonymous_520094108;
function initializeDigits_520093727(prg_520093728) {
  BeforeRet: do {
    L1: do {
      var i_520093755 = 0;
      var i_385876050 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_385876050 < 79)) break L3;
            i_520093755 = i_385876050;
            prg_520093728.ram[chckIndx(i_520093755, 0, (prg_520093728.ram).length-1)] = (DigitSpriteData_520093705[chckIndx(i_520093755, 0, (DigitSpriteData_520093705).length-1)] & 0xff);
            i_385876050 = addInt(i_385876050, 1);
          }
      } while(false);
    } while(false);
    break BeforeRet;
  } while (false);

  
}
function newChip8_520093765() {
  var result_520093766 = null;

  BeforeRet: do {
    var chip8_520093767 = {vram: [new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64)], ram: new Uint8Array(65535), stack: new Uint32Array(22), stackPosition: 0, vars: new Uint8Array(16), keyboard: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], i: 0, endPoint: 0, dt: 0, st: 0};
    initializeDigits_520093727(chip8_520093767);
    result_520093766 = chip8_520093767;
    break BeforeRet;
  } while (false);

  return result_520093766;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555110, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}
function decode_503316873(s_503316874) {
    function decodeSize_503316876(size_503316877) {
      var result_503316878 = 0;

      BeforeRet: do {
        result_503316878 = addInt(divInt(mulInt(size_503316877, 3), 4), 6);
        break BeforeRet;
      } while (false);

      return result_503316878;

    }

  var result_503316875 = [];

  BeforeRet: do {
    if (((s_503316874).length == 0)) {
    break BeforeRet;
    }
    
    (result_503316875.length = chckRange(decodeSize_503316876((s_503316874).length), 0, 2147483647));
    var inputIndex_503316883 = 0;
    var outputIndex_503316884 = 0;
    var inputLen_503316885 = (s_503316874).length;
    var inputEnds_503316886 = 0;
    L1: do {
        L2: while (true) {
        if (!(ConstSet2[s_503316874[chckIndx(subInt(inputLen_503316885, 1), 0, (s_503316874).length-1)]] != undefined)) break L2;
          inputLen_503316885 = subInt(inputLen_503316885, 1);
        }
    } while(false);
    inputEnds_503316886 = subInt(inputLen_503316885, 4);
    L3: do {
        L4: while (true) {
        if (!(inputIndex_503316883 <= inputEnds_503316886)) break L4;
          L5: do {
              L6: while (true) {
              if (!(ConstSet3[s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)]] != undefined)) break L6;
                inputIndex_503316883 = addInt(inputIndex_503316883, 1);
              }
          } while(false);
          var a_503316906 = ((decodeTable_503316863[chckIndx(s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)], 0, (decodeTable_503316863).length-1)])|0);
          if ((a_503316906 == 255)) {
          raiseException({message: (makeNimstrLit("Invalid base64 format character `") || []).concat([s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((inputIndex_503316883)+"") || [],makeNimstrLit(".") || []), parent: null, m_type: NTI33555114, name: null, trace: [], up: null}, "ValueError");
          }
          
          inputIndex_503316883 = addInt(inputIndex_503316883, 1);
          var b_503316918 = ((decodeTable_503316863[chckIndx(s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)], 0, (decodeTable_503316863).length-1)])|0);
          if ((b_503316918 == 255)) {
          raiseException({message: (makeNimstrLit("Invalid base64 format character `") || []).concat([s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((inputIndex_503316883)+"") || [],makeNimstrLit(".") || []), parent: null, m_type: NTI33555114, name: null, trace: [], up: null}, "ValueError");
          }
          
          inputIndex_503316883 = addInt(inputIndex_503316883, 1);
          var c_503316930 = ((decodeTable_503316863[chckIndx(s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)], 0, (decodeTable_503316863).length-1)])|0);
          if ((c_503316930 == 255)) {
          raiseException({message: (makeNimstrLit("Invalid base64 format character `") || []).concat([s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((inputIndex_503316883)+"") || [],makeNimstrLit(".") || []), parent: null, m_type: NTI33555114, name: null, trace: [], up: null}, "ValueError");
          }
          
          inputIndex_503316883 = addInt(inputIndex_503316883, 1);
          var d_503316942 = ((decodeTable_503316863[chckIndx(s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)], 0, (decodeTable_503316863).length-1)])|0);
          if ((d_503316942 == 255)) {
          raiseException({message: (makeNimstrLit("Invalid base64 format character `") || []).concat([s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((inputIndex_503316883)+"") || [],makeNimstrLit(".") || []), parent: null, m_type: NTI33555114, name: null, trace: [], up: null}, "ValueError");
          }
          
          inputIndex_503316883 = addInt(inputIndex_503316883, 1);
          result_503316875[chckIndx(outputIndex_503316884, 0, (result_503316875).length-1)] = chckRange((((a_503316906 << 2) | (b_503316918 >> 4)) & 255), 0, 255);
          outputIndex_503316884 = addInt(outputIndex_503316884, 1);
          result_503316875[chckIndx(outputIndex_503316884, 0, (result_503316875).length-1)] = chckRange((((b_503316918 << 4) | (c_503316930 >> 2)) & 255), 0, 255);
          outputIndex_503316884 = addInt(outputIndex_503316884, 1);
          result_503316875[chckIndx(outputIndex_503316884, 0, (result_503316875).length-1)] = chckRange((((c_503316930 << 6) | (d_503316942 >> 0)) & 255), 0, 255);
          outputIndex_503316884 = addInt(outputIndex_503316884, 1);
        }
    } while(false);
    var leftLen_503316987 = absInt(modInt(subInt(inputIndex_503316883, inputLen_503316885), 4));
    if ((leftLen_503316987 == 2)) {
    var a_503316991 = ((decodeTable_503316863[chckIndx(s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)], 0, (decodeTable_503316863).length-1)])|0);
    if ((a_503316991 == 255)) {
    raiseException({message: (makeNimstrLit("Invalid base64 format character `") || []).concat([s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((inputIndex_503316883)+"") || [],makeNimstrLit(".") || []), parent: null, m_type: NTI33555114, name: null, trace: [], up: null}, "ValueError");
    }
    
    inputIndex_503316883 = addInt(inputIndex_503316883, 1);
    var b_503317003 = ((decodeTable_503316863[chckIndx(s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)], 0, (decodeTable_503316863).length-1)])|0);
    if ((b_503317003 == 255)) {
    raiseException({message: (makeNimstrLit("Invalid base64 format character `") || []).concat([s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((inputIndex_503316883)+"") || [],makeNimstrLit(".") || []), parent: null, m_type: NTI33555114, name: null, trace: [], up: null}, "ValueError");
    }
    
    inputIndex_503316883 = addInt(inputIndex_503316883, 1);
    result_503316875[chckIndx(outputIndex_503316884, 0, (result_503316875).length-1)] = chckRange((((a_503316991 << 2) | (b_503317003 >> 4)) & 255), 0, 255);
    outputIndex_503316884 = addInt(outputIndex_503316884, 1);
    }
    else {
    if ((leftLen_503316987 == 3)) {
    var a_503317027 = ((decodeTable_503316863[chckIndx(s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)], 0, (decodeTable_503316863).length-1)])|0);
    if ((a_503317027 == 255)) {
    raiseException({message: (makeNimstrLit("Invalid base64 format character `") || []).concat([s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((inputIndex_503316883)+"") || [],makeNimstrLit(".") || []), parent: null, m_type: NTI33555114, name: null, trace: [], up: null}, "ValueError");
    }
    
    inputIndex_503316883 = addInt(inputIndex_503316883, 1);
    var b_503317039 = ((decodeTable_503316863[chckIndx(s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)], 0, (decodeTable_503316863).length-1)])|0);
    if ((b_503317039 == 255)) {
    raiseException({message: (makeNimstrLit("Invalid base64 format character `") || []).concat([s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((inputIndex_503316883)+"") || [],makeNimstrLit(".") || []), parent: null, m_type: NTI33555114, name: null, trace: [], up: null}, "ValueError");
    }
    
    inputIndex_503316883 = addInt(inputIndex_503316883, 1);
    var c_503317051 = ((decodeTable_503316863[chckIndx(s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)], 0, (decodeTable_503316863).length-1)])|0);
    if ((c_503317051 == 255)) {
    raiseException({message: (makeNimstrLit("Invalid base64 format character `") || []).concat([s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_503316874[chckIndx(inputIndex_503316883, 0, (s_503316874).length-1)])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((inputIndex_503316883)+"") || [],makeNimstrLit(".") || []), parent: null, m_type: NTI33555114, name: null, trace: [], up: null}, "ValueError");
    }
    
    inputIndex_503316883 = addInt(inputIndex_503316883, 1);
    result_503316875[chckIndx(outputIndex_503316884, 0, (result_503316875).length-1)] = chckRange((((a_503317027 << 2) | (b_503317039 >> 4)) & 255), 0, 255);
    outputIndex_503316884 = addInt(outputIndex_503316884, 1);
    result_503316875[chckIndx(outputIndex_503316884, 0, (result_503316875).length-1)] = chckRange((((b_503317039 << 4) | (c_503317051 >> 2)) & 255), 0, 255);
    outputIndex_503316884 = addInt(outputIndex_503316884, 1);
    }
    }
    (result_503316875.length = chckRange(outputIndex_503316884, 0, 2147483647));
  } while (false);

  return result_503316875;

}
function chip8load() {
    program_385875974[0] = newChip8_520093765();
    var index_385875976 = 512;
    var data_385875977 = decode_503316873(makeNimstrLit("orQj5iK2cAHQETAlEgZx/9ARYBrQEWAlMQASDsRwRHASHMMDYB5hAyJc9RXQFD8BEjzQFHH/0BQjQBIc56EicuihIoTpoSKW4p4SUGYA9hX2BzYAEjzQFHEBEiqixPQeZgBDAWYEQwJmCEMDZgz2HgDu0BRw/yM0PwEA7tAUcAEjNADu0BRwASM0PwEA7tAUcP8jNADu0BRzAUMEYwAiXCM0PwEA7tAUc/9D/2MDIlwjNADugABnBWgGaQRhH2UQYgcA7kDgAABAwEAAAOBAAEBgQABAQGAAIOAAAMBAQAAA4IAAQEDAAADgIABgQEAAgOAAAEDAgADAYAAAQMCAAMBgAACAwEAAAGDAAIDAQAAAYMAAwMAAAMDAAADAwAAAwMAAAEBAQEAA8AAAQEBAQADwAADQFGY1dv82ABM4AO6itIwQPB58ATwefAE8HnwBI15LCiNykcAA7nEBE1BgG2sA0BE/AHsB0BFwATAlE2IA7mAb0BFwATAlE3SOEI3gfv9gG2sA0OE/ABOQ0OETlNDRewFwATAlE4ZLABOmff9+/z0BE4IjwD8BI8B6ASPAgKBtB4DSQAR1/kUCZQQA7qcA8lWoBPoz8mXwKW0ybgDd5X0F8Snd5X0F8ind5acA8mWitADuagBgGQDuNyM="));
    L1: do {
      var i_385875983 = 0;
      var colontmp__385876045 = 0;
      colontmp__385876045 = subInt((data_385875977).length, 1);
      var res_385876046 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_385876046 <= colontmp__385876045)) break L3;
            i_385875983 = res_385876046;
            program_385875974[0].ram[chckIndx(addInt(index_385875976, i_385875983), 0, (program_385875974[0].ram).length-1)] = data_385875977[chckIndx(i_385875983, 0, (data_385875977).length-1)];
            program_385875974[0].endPoint = (addInt(index_385875976, i_385875983) >>> 0);
            res_385876046 = addInt(res_385876046, 1);
          }
      } while(false);
    } while(false);

  
}
function getNibble_520094173(prg_520094175, i_520094176) {
  var result_520094177 = 0;

  BeforeRet: do {
    result_520094177 = (((prg_520094175.ram[chckIndx(((i_520094176 / 2) >>> 0), 0, (prg_520094175.ram).length-1)] & 0xff) >>> mulInt(4, ((i_520094176 % 2) == 0))) & 15);
    break BeforeRet;
  } while (false);

  return result_520094177;

}
function getInstruction_520094183(prg_520094185, i_520094186) {
  var result_520094187 = 0;

  BeforeRet: do {
    result_520094187 = (((prg_520094185.ram[chckIndx(i_520094186, 0, (prg_520094185.ram).length-1)] & 0xffff) << 8) | (prg_520094185.ram[chckIndx(((i_520094186 + 1) >>> 0), 0, (prg_520094185.ram).length-1)] & 0xffff));
    break BeforeRet;
  } while (false);

  return result_520094187;

}
function cycle_520094170(prg_520094171) {
    var pos_520094172 = prg_520094171.stack[chckIndx(prg_520094171.stackPosition, 0, (prg_520094171.stack).length-1)];
    var instructionMask_520094182 = getNibble_520094173(prg_520094171, ((pos_520094172 * 2) >>> 0));
    var instruction_520094192 = [getInstruction_520094183(prg_520094171, pos_520094172)];
    Chip8InstructionPointers_520093793[0][chckIndx(instructionMask_520094182, 0, (Chip8InstructionPointers_520093793[0]).length-1)](prg_520094171, instruction_520094192, 0);
    prg_520094171.stack[chckIndx(prg_520094171.stackPosition, 0, (prg_520094171.stack).length-1)] = ((prg_520094171.stack[chckIndx(prg_520094171.stackPosition, 0, (prg_520094171.stack).length-1)] + 2) >>> 0);

  
}
function chip8cycle() {
    cycle_520094170(program_385875974[0]);

  
}
function chip8getvram() {
  var result_385875986 = [new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64), new Uint8Array(64)];

  BeforeRet: do {
    result_385875986 = nimCopy(result_385875986, program_385875974[0].vram, NTI385876007);
    break BeforeRet;
  } while (false);

  return result_385875986;

}
function chip8frame() {
    program_385875974[0].dt = ((program_385875974[0].dt - 1) & 0xff);
    if ((program_385875974[0].dt == 255)) {
    program_385875974[0].dt = 60;
    }
    

  
}
function find_385876003(a_385876006, item_385876007) {
  var result_385876008 = 0;

  BeforeRet: do {
    result_385876008 = 0;
    L1: do {
      var i_385876030 = 0;
      var i_385876057 = 0;
      if ((i_385876057 <= 15)) {
      L2: do {
          L3: while (true) {
          if (!true) break L3;
            i_385876030 = a_385876006[chckIndx(i_385876057, 0, (a_385876006).length-1)];
            if ((i_385876030 == item_385876007)) {
            break BeforeRet;
            }
            
            result_385876008 = addInt(result_385876008, 1);
            if ((15 <= i_385876057)) {
            break L2;
            }
            
            i_385876057 = addInt(i_385876057, 1);
          }
      } while(false);
      }
      
    } while(false);
    result_385876008 = -1;
  } while (false);

  return result_385876008;

}
function chip8keydown(scankey_385876002) {
    rawEcho(cstrToNimstr((scankey_385876002)+""));
    var code_385876035 = find_385876003(KeyboardCodes_385875972, scankey_385876002);
    if (!((code_385876035 == -1))) {
    program_385875974[0].keyboard[chckIndx(code_385876035, 0, (program_385875974[0].keyboard).length-1)] = true;
    }
    

  
}
function chip8keyup(scankey_385876037) {
    var code_385876043 = find_385876003(KeyboardCodes_385875972, scankey_385876037);
    if (!((code_385876043 == -1))) {
    program_385875974[0].keyboard[chckIndx(code_385876043, 0, (program_385875974[0].keyboard).length-1)] = false;
    }
    

  
}
var program_385875974 = [null];
